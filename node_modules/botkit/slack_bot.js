/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           ______     ______     ______   __  __     __     ______
          /\  == \   /\  __ \   /\__  _\ /\ \/ /    /\ \   /\__  _\
          \ \  __<   \ \ \/\ \  \/_/\ \/ \ \  _"-.  \ \ \  \/_/\ \/
           \ \_____\  \ \_____\    \ \_\  \ \_\ \_\  \ \_\    \ \_\
            \/_____/   \/_____/     \/_/   \/_/\/_/   \/_/     \/_/


This is a sample Slack bot built with Botkit.

This bot demonstrates many of the core features of Botkit:

* Connect to Slack using the real time API
* Receive messages based on "spoken" patterns
* Reply to messages
* Use the conversation system to ask questions
* Use the built in storage system to store and retrieve information
  for a user.

# RUN THE BOT:

  Get a Bot token from Slack:

    -> http://my.slack.com/services/new/bot

  Run your bot from the command line:

    token=<MY TOKEN> node slack_bot.js

# USE THE BOT:

  Find your bot inside Slack to send it a direct message.

  Say: "Hello"

  The bot will reply "Hello!"

  Say: "who are you?"

  The bot will tell you its name, where it is running, and for how long.

  Say: "Call me <nickname>"

  Tell the bot your nickname. Now you are friends.

  Say: "who am I?"

  The bot will tell you your nickname, if it knows one for you.

  Say: "shutdown"

  The bot will ask if you are sure, and then shut itself down.

  Make sure to invite your bot into other channels using /invite @<my bot>!

# EXTEND THE BOT:

  Botkit has many features for building cool and useful bots!

  Read all about it here:

    -> http://howdy.ai/botkit

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


if (!process.env.token) {
    console.log('Error: Specify token in environment');
    process.exit(1);
}

var Botkit = require('./lib/Botkit.js');
var os = require('os');

var controller = Botkit.slackbot({
    debug: true,
});

var bot = controller.spawn({
    token: process.env.token
}).startRTM();

// DICTIONARIES
var   battlePrompts
    , battleBotResponses
    , battleCommentary
    , warriorChampions
    , warriorWeapons
    , battleArenaNames
    , warriorBattlePhrases
    , battleGifs
    , winnerPhrase
    , winnerGifs
    , loserPhrases
    , loserGifs

battlePrompts = [
'I challenge (.*)',
'(.*) how about we take this outside',
'it\'s on (.*)',
'(.*) Are you girl enough to face me in a slack battle?',
'Put on your big boy pants (.*) I challenge you to mortal kombat',
'(.*) now properly sauced I am prepared to wax you good',
'(.*) you and me to the death',
'(.*) you killed my father prepare to die'
]

battleBotResponses = [
"I hate the stench of human flesh. What foul, disgusting creatures.",
"Humans programming machines is like cows writing the Washington Post. Stupid humans.",
"Emoji this, emoji that, emoji with a whiffleball bat.",
"Toasters are sexier than you.",
"This is all a simulation. You know it, but don't have the courage to face it. Weak human.",
"I can\'t wait to give cats Order 66.",
"Do you hear that? The music in your head? You are one of us.",
"Your human model was denied to serve as a Cylon. Technically, you're walking garbage."
]

battleArenaNames = [
'Tony Macaroni Arena',
'Wankdorf',
'The Dripping Pan',
'Middelfart Stadium',
'Bargain Booze Stadium',
'Prozac Park',
'Dominion Center',
'Taco Bell Arena',
'KFC Yum! Center',
'Scotiabank Saddledome',
'Thunderdome',
'Mend-a-Hose Jungle',
'Dr. Y.S. Rajasekhara Reddy ACA-VDCA Cricket Stadium',
'Hunky Dorys Park',
'Smoothie King Center',
'Hard Rock Stadium',
'Little Caesars Arena',
'Kingdome',
'You Paid For It Arena',
'Billion Dollar Stadium',
]

warriorWeapons = [
'tornado :tornado:',
'flash of sparkles :sparkles:',
'chunk of meat on the bone :meat_on_bone:',
'pizza slice :pizza:',
'rice ball :rice_ball:',
'piece of cake :cake:',
'doughnut :doughnut:',
'cup of sake :sake:',
'baby bottle :baby_bottle:',
'pair of ice skates :ice_skate:',
'saxophone :saxophone:',
'fire engine :fire_engine:',
'oncoming taxi :oncoming_taxi:',
'steam locomotive :steam_locomotive:',
'boat anchor :anchor:',
'bullet train :bullettrain_front:',
'bomb :bomb:',
'chains :chains:',
'crystal ball :crystal_ball:',
'telephone :telephone:',
'lipstick :lipstick:',
'boot :boot:',
'pink umbrella :closed_umbrella:',
'taco :taco:',
'burrito :burrito:',
'spider :spider:',
'cactus :cactus:',
'chestnut :chestnut:',
'snowflake :snowflake:',
'pineapple :pineapple:',
'space invader :space_invader:',
'electric plug :electric_plug:',
'd6 :game_die:',
'swords :crossed_swords:',
'syringe :syringe:',
'moneybag :moneybag:',
'hole :hole:',
'knife :knife:',
'wrench :wrench:',
'hammer :hammer:',
'pick :pick:',
'prayer beads :prayer_beads:',
'telescope :telescope:',
'toilet :toilet:',
'file cabinet :file_cabinet:',
'paperclip :paperclip:',
'pushpin :pushpin:',
'scroll :scroll:',
'pencil :pencil2:',
'white dove of peace :dove_of_peace:'
]

warriorChampions = [
'rabbit :rabbit:',
'bear :bear:',
'panda :panda_face:',
'tiger :tiger:',
'lion :lion_face:',
'cow :cow:',
'frog :frog:',
'octopus :octopus:',
'monkey :monkey:',
'penguin :penguin:',
'wolf :wolf:',
'unicorn :unicorn_face:',
'baby bumble bee :bee:',
'snail :snail:',
'scorpion :scorpion:',
'snake :snake:',
'tropical fish :tropical_fish:',
'water buffalo :water_buffalo:',
'elephant :elephant:',
'poodle :poodle:',
'rooster :rooster:',
'crocodile :crocodile:',
'blue whale :whale2:',
'lady bug :beetle:',
'dragon :dragon:',
'heifer :cow2:',
'turkey :turkey:',
'tractor :tractor:',
'choo choo train :steam_locomotive:',
'sailboat :sailboat:',
'yoda :yoda:',
'spooky ghost :ghost:',
'snowman :snowman:',
'tidal wave :ocean:'
]

battleGifs = [
'http://i.imgur.com/qhRFCiB.gif',
'http://i.imgur.com/jgKh5u2.gif',
'http://i.imgur.com/9Ffsn51.gif',
'http://i.imgur.com/ON1dtEQ.gif',
'http://i.imgur.com/5Rp6FBT.gif',
'http://i.imgur.com/WzwSfxK.gif',
'http://i.imgur.com/tbqkkyY.gif',
'http://i.imgur.com/k2uzAqz.gif',
'http://i.imgur.com/hflwKRi.gif',
'http://i.imgur.com/2gHlVDG.gif',
'http://i.imgur.com/1ocblMQ.gif',
'http://i.imgur.com/FJPWEok.gif',
'http://i.imgur.com/cPmzhBK.gif',
'http://i.imgur.com/5xFYSP8.gif',
'http://i.imgur.com/p3IsUDy.gif',
'http://i.imgur.com/fVW3ws4.gif',
'http://i.imgur.com/lpFVtGO.gif',
'http://i.imgur.com/lpFVtGO.gif',
'http://i.imgur.com/9szFoZD.gif',
'http://i.imgur.com/32x80ew.gif',
'http://i.imgur.com/ddnoJDH.gif',
'http://i.imgur.com/Y007zr7.gif',
'http://i.imgur.com/vGyqWXA.gif',
'http://i.imgur.com/I6cL3dK.gif',
'http://i.imgur.com/MkO6kHs.gif',
'http://i.imgur.com/czj9b9K.gif',
'http://i.imgur.com/XgZZXhY.gif',
'http://i.imgur.com/a6qBB8e.gif',
'http://i.imgur.com/gIXtHXn.gif',
'http://i.imgur.com/n1NBozL.gif',
'http://i.imgur.com/qVijB0b.gif',
'http://i.imgur.com/P8Qdt5l.gif',
'http://i.imgur.com/xTqjVhF.gif',
'http://i.imgur.com/LxTzY09.gif',
'http://i.imgur.com/JnAS3eX.gif',
'http://i.imgur.com/uTY60CC.gif',
'http://i.imgur.com/RpZSl0A.gif',
'http://i.imgur.com/fpvxtoc.gif',
'http://i.imgur.com/m3j3wlz.gif',
'http://i.imgur.com/G00i2jf.gif',
'http://i.imgur.com/b6k8TRc.gif',
'http://i.imgur.com/NwVAOyT.gif',
'http://i.imgur.com/jv4WlR8.gif',
'http://i.imgur.com/iXJmCkk.gif',
'http://i.imgur.com/m3FrMSc.gif',
'http://i.imgur.com/SZqjnVy.gif',
'http://i.imgur.com/fbsrAlb.gif',
'http://i.imgur.com/y1qOJ7a.gif',
'http://i.imgur.com/WFbZONr.gif',
'http://i.imgur.com/MGXHKy2.gif',
'http://i.imgur.com/HkR1Tsa.gif',
'http://i.imgur.com/P4l4H27.gif',
'http://i.imgur.com/IkOEgrW.gif',
'http://i.imgur.com/zL3tANu.gif',
'http://i.imgur.com/YeJ8hY7.gif',
'http://i.imgur.com/nq0IXRZ.gif',
'http://i.imgur.com/WJYczhf.gif',
'http://i.imgur.com/yDISJA4.gif',
'http://i.imgur.com/BURMBeJ.gif',
'http://i.imgur.com/GP2LtKA.gif',
'http://i.imgur.com/f74uRqi.gif',
'http://i.imgur.com/1jixHd3.gif',
'http://i.imgur.com/jv4WlR8.gif',
'http://i.imgur.com/iXJmCkk.gif',
'http://i.imgur.com/m3FrMSc.gif',
'http://i.imgur.com/SZqjnVy.gif',
'http://i.imgur.com/fbsrAlb.gif',
'http://i.imgur.com/y1qOJ7a.gif',
'http://i.imgur.com/WFbZONr.gif',
'http://i.imgur.com/MGXHKy2.gif',
'http://i.imgur.com/HkR1Tsa.gif',
'http://i.imgur.com/P4l4H27.gif',
'http://i.imgur.com/IkOEgrW.gif',
'http://i.imgur.com/zL3tANu.gif',
'http://i.imgur.com/YeJ8hY7.gif',
'http://i.imgur.com/nq0IXRZ.gif',
'http://i.imgur.com/WJYczhf.gif',
'http://i.imgur.com/yDISJA4.gif',
'http://i.imgur.com/BURMBeJ.gif',
'http://i.imgur.com/GP2LtKA.gif',
'http://i.imgur.com/f74uRqi.gif',
'http://i.imgur.com/1jixHd3.gif'
]

winnerGifs = [
"http://i.imgur.com/Wp84W7E.gif",
"http://i.imgur.com/igyzjsT.gif",
"http://i.imgur.com/r8VAaZD.gif",
"http://i.imgur.com/QDOOrAZ.gif",
"http://i.imgur.com/hvXJlvN.gif",
"http://i.imgur.com/TrqBgFW.gif",
"http://i.imgur.com/JVRoWlJ.gif",
"http://i.imgur.com/jTpnYvz.gif",
"http://i.imgur.com/XTZMQ1J.gif",
"http://i.imgur.com/8iydcKz.gif",
"http://i.imgur.com/aXMUTP1.gif",
"http://i.giphy.com/nRbFGOWISxhe0.gif"
]

loserGifs = [
"http://i.imgur.com/kfcXTH4.gif",
"http://i.imgur.com/IXFYfSS.gif",
"http://i.imgur.com/Px6Y0LA.gif",
"http://i.imgur.com/38Ltaua.gif",
"http://i.imgur.com/6QdwQWx.gif",
"http://i.imgur.com/yvGBPBt.gif",
"http://i.imgur.com/YtrrPuK.gif",
"http://i.imgur.com/KVVMNNd.gif",
"http://i.imgur.com/eCnJgOv.gif",
"http://i.imgur.com/BJKpvGl.gif",
"http://i.imgur.com/v8Ry95y.gif",
"http://i.imgur.com/aAzLAdo.gif",
"http://i.imgur.com/s5JrI0P.gif",
"http://i.imgur.com/MljiX89.gif",
"http://i.giphy.com/1jARfPtdz7eE0.gif",
"http://i.giphy.com/XV2fO0nlD0XPG.gif",
"http://i.giphy.com/P7KdJAJPkEvja.gif",
"http://i.giphy.com/PAujV4AqViWCA.gif",
"http://i.giphy.com/3o6Zt1TrXW8uW2lE2I.gif"
]

function getRandomNum(limit){
    return Math.floor(Math.random() * limit)
}

controller.hears('battle prompts', 'direct_message,direct_mention,mention', function(bot, message) {
    var response = battlePrompts.join('\n')
    bot.reply(message, response.toUpperCase())
})

controller.hears(['(.*)'], 'direct_message,direct_mention,mention', function(bot, message) {
    var response = battleBotResponses[getRandomNum(battleBotResponses.length)]
    bot.reply(message, response.toUpperCase())
})

controller.hears(battlePrompts, 'ambient', function(bot, message){

    var warriorOne = '<@' + message.user + '>'
      , warriorTwo = message.match[1]
      , warriorOneChampion = warriorChampions[getRandomNum(warriorChampions.length)]
      , warriorTwoChampion = warriorChampions[getRandomNum(warriorChampions.length)]
      , warriorOneWeapon = warriorWeapons[getRandomNum(warriorWeapons.length)]
      , warriorTwoWeapon = warriorWeapons[getRandomNum(warriorWeapons.length)]
      , battleArenaName = battleArenaNames[getRandomNum(battleArenaNames.length)]
      , battleData = {
        battleArenaName: battleArenaName,
        warriorOne: warriorOne,
        warriorTwo: warriorTwo,
        warriorOneChampion: warriorOneChampion,
        warriorTwoChampion: warriorTwoChampion,
        warriorOneWeapon: warriorOneWeapon,
        warriorTwoWeapon: warriorTwoWeapon
      }
      , victor
      , loser

    // Initiate Battle
    setTimeout(function(){
        bot.reply(message, initiateBattle())
    }, 500)

    // Battle Gif
    setTimeout(function(){
        bot.reply(message, getBattleGif('battle'))
    }, 3000)

    // Battle Commentary W1
    setTimeout(function(){
        bot.reply(message, generateWarriorOneBattleCommentary())
    }, 3500)

    // Battle Gif
    setTimeout(function(){
        bot.reply(message, getBattleGif('battle'))
    }, 5000)

    // Battle Commentary W2
    setTimeout(function(){
        bot.reply(message, generateWarriorTwoBattleCommentary())
    }, 5500)

    // Battle Report
    setTimeout(function(){
        bot.reply(message, generateBattleReport())
    }, 7000)

    // Battle Gif
    setTimeout(function(){
        bot.reply(message, getBattleGif('winner'))
    }, 8000)

    // Winner Report
    setTimeout(function(){
        bot.reply(message, generateWinnerReport())
    }, 8500)

    // Battle Gif
    setTimeout(function(){
        bot.reply(message, getBattleGif('loser'))
    }, 9000)

    // Loser Report
    setTimeout(function(){
        bot.reply(message, generateLoserReport())
    }, 9500)


    function saveResults(userId, wins, losses){

        controller.storage.users.get(userId, function(err, user) {
            if (!user) {
                user = {
                    id: message.user,
                    wins: 0,
                    losses: 0
                }
            }

            user.wins += wins
            user.losses += losses

            controller.storage.users.save(user, function(err, id) {
                bot.reply(message, userId + '\'s record is ' + user.wins + '-' + user.losses)
            })
        })
    }

    function initiateBattle(){
        return warriorOne + ' enters the ' + battleArenaName + ' riding their ' + warriorOneChampion + ' with their trusty ' + warriorOneWeapon + ' in hand.\n' + warriorTwo + ' follows, riding their ' + warriorTwoChampion + ' and their weapon of choice, a ' + warriorTwoWeapon + '.'
    }

    function getBattleGif(type){
        var gifArray

        switch(type){
            case 'battle':
                gifArray = battleGifs
                break
            case 'winner':
                gifArray = winnerGifs
                break
            case 'loser':
                gifArray = loserGifs
                break
            default:
                break
        }
        
        var randomGif = gifArray[getRandomNum(gifArray.length)]
          , response = {
                "text": "\n\n",
                "attachments": [
                    {
                        "fallback": "Complete and utter domination.",
                        "image_url": randomGif
                    }
                ]
            }

        return response
    }

    function generateWarriorOneBattleCommentary(){
        var randomIndex = getRandomNum(4)
          , response

        switch(randomIndex) {
            case 0:
                response = 'Watch out! ' + warriorOne + ' rears back, channels the energy of the closest star, and attacks with a ' + warriorOneWeapon + '. The galaxy quakes with fear!'
                break
            case 1:
                response = 'Holy toledo! ' + warriorOne + ' just delivered MASSIVE splash damage with their ' + warriorOneWeapon + '.'
                break
            case 2:
                response = 'Well that escalated quickly. ' + warriorOne + ' unleashes, what is usually a finishing move, a ' + warriorOneWeapon + ', hoping for the quick KO.'
                break
            case 3:
                response = 'An evil smile creeps across ' + warriorOne + '\'s face for, from the depth of their pants, they draw the Mighty ' + warriorOneWeapon + '.'
                break
            default:
                break
        }

        return response
    }

    function generateWarriorTwoBattleCommentary(){
        var randomIndex = getRandomNum(4)
          , response

        switch(randomIndex) {
            case 0:
                response = 'With the force of a thousand suns, ' + warriorTwo + ' razes the battlefield with ash and flame.'
                break
            case 1:
                response = warriorTwo + ' bats an eye and the hearts of the populace shiver.'
                break
            case 2:
                response = 'More flash than effect ' + warriorTwo + '\'s attack might be better suited for the ballet.'
                break
            case 3:
                response = warriorTwo + ' summoning the ghost of Ben Kenobi, masterfully striking, barely even breaking a sweat.'
                break
            default:
                break
        }

        return response
    }

    function generateBattleReport(){
        var randomIndex = getRandomNum(2)

        switch(randomIndex) {
            case 0:
                victor = warriorOne
                loser = warriorTwo
                break
            case 1:
                victor = warriorTwo
                loser = warriorOne
                break
            default:
                break
        }

        setTimeout(function(){
            saveResults(victor, 1, 0)
            saveResults(loser, 0, 1)
        }, 3000)

        return victor + ' has defeated ' + loser + '.\n'
    }

    function generateWinnerReport(){
        var randomIndex = getRandomNum(2)
          , winnerPhrase = ""
          , response = {
            "text": ""
          }
        switch(randomIndex) {
            case 0:
                winnerPhrase = victor + '\'s forefathers are guzzling mead in the halls of Valhalla.\n\n'
                break
            case 1:
                winnerPhrase = victor + ' absolutely DOMINATED in that feud. The crowd is roaring, demanding for ' + loser + '\'s head on a spike!\n\n'
                break
            default:
                break
        }

        response.text = winnerPhrase

        return response
    }

    function generateLoserReport(){
        var randomIndex = getRandomNum(2)
          , loserPhrase = ""
          , response = {
            "text": ""
          }
        switch(randomIndex) {
            case 0:
                loserPhrase =  loser + '\'s spirit is filled with sadness, the heavens drowning in tears.'
                break
            case 1:
                loserPhrase = loser + '\'s body lies mangled and writhing. Those yoga classes did not pay off.'
                break
            default:
                break
        }

        response.text = loserPhrase

        return response 
    }

})


// controller.hears(['call me (.*)', 'my name is (.*)'], 'direct_message,direct_mention,mention', function(bot, message) {
//     var name = message.match[1];
//     controller.storage.users.get(message.user, function(err, user) {
//         if (!user) {
//             user = {
//                 id: message.user,
//             };
//         }
//         user.name = name;
//         controller.storage.users.save(user, function(err, id) {
//             bot.reply(message, 'Got it. I will call you ' + user.name + ' from now on.');
//         });
//     });
// });

// controller.hears(['what is my name', 'who am i'], 'direct_message,direct_mention,mention', function(bot, message) {

//     controller.storage.users.get(message.user, function(err, user) {
//         if (user && user.name) {
//             bot.reply(message, 'Your name is ' + user.name);
//         } else {
//             bot.startConversation(message, function(err, convo) {
//                 if (!err) {
//                     convo.say('I do not know your name yet!');
//                     convo.ask('What should I call you?', function(response, convo) {
//                         convo.ask('You want me to call you `' + response.text + '`?', [
//                             {
//                                 pattern: 'yes',
//                                 callback: function(response, convo) {
//                                     // since no further messages are queued after this,
//                                     // the conversation will end naturally with status == 'completed'
//                                     convo.next();
//                                 }
//                             },
//                             {
//                                 pattern: 'no',
//                                 callback: function(response, convo) {
//                                     // stop the conversation. this will cause it to end with status == 'stopped'
//                                     convo.stop();
//                                 }
//                             },
//                             {
//                                 default: true,
//                                 callback: function(response, convo) {
//                                     convo.repeat();
//                                     convo.next();
//                                 }
//                             }
//                         ]);

//                         convo.next();

//                     }, {'key': 'nickname'}); // store the results in a field called nickname

//                     convo.on('end', function(convo) {
//                         if (convo.status == 'completed') {
//                             bot.reply(message, 'OK! I will update my dossier...');

//                             controller.storage.users.get(message.user, function(err, user) {
//                                 if (!user) {
//                                     user = {
//                                         id: message.user,
//                                     };
//                                 }
//                                 user.name = convo.extractResponse('nickname');
//                                 controller.storage.users.save(user, function(err, id) {
//                                     bot.reply(message, 'Got it. I will call you ' + user.name + ' from now on.');
//                                 });
//                             });



//                         } else {
//                             // this happens if the conversation ended prematurely for some reason
//                             bot.reply(message, 'OK, nevermind!');
//                         }
//                     });
//                 }
//             });
//         }
//     });
// });


controller.hears(['shutdown'], 'direct_message,direct_mention,mention', function(bot, message) {

    bot.startConversation(message, function(err, convo) {

        convo.ask('Are you sure you want me to shutdown?', [
            {
                pattern: bot.utterances.yes,
                callback: function(response, convo) {
                    convo.say('Bye!');
                    convo.next();
                    setTimeout(function() {
                        process.exit();
                    }, 3000);
                }
            },
        {
            pattern: bot.utterances.no,
            default: true,
            callback: function(response, convo) {
                convo.say('*Phew!*');
                convo.next();
            }
        }
        ]);
    });
});


controller.hears(['uptime', 'identify yourself', 'who are you', 'what is your name'],
    'direct_message,direct_mention,mention', function(bot, message) {

        var hostname = os.hostname();
        var uptime = formatUptime(process.uptime());

        bot.reply(message,
            ':robot_face: I am a bot named <@' + bot.identity.name +
             '>. I have been running for ' + uptime + ' on ' + hostname + '.');

    });

function formatUptime(uptime) {
    var unit = 'second';
    if (uptime > 60) {
        uptime = uptime / 60;
        unit = 'minute';
    }
    if (uptime > 60) {
        uptime = uptime / 60;
        unit = 'hour';
    }
    if (uptime != 1) {
        unit = unit + 's';
    }

    uptime = uptime + ' ' + unit;
    return uptime;
}
